generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String   @id @default(uuid())
  name           String
  slug           String   @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  menuCategories MenuCategory[]
  products       Product[]
  orders         Order[]
}

model MenuCategory {
  id           String   @id @default(uuid())
  name         String
  restaurantId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products Product[]

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Product {
  id             String   @id @default(uuid())
  name           String
  slug           String?
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurantId   String
  menuCategoryId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orderProducts OrderProduct[]

  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuCategory MenuCategory @relation(fields: [menuCategoryId], references: [id])
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum ConsumptionMethod {
  TAKEAWAY
  DINE_IN
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  restaurantId      String
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  orderProducts OrderProduct[]

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   Int
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
